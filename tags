!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BE_COND	Set.h	/^#define BE_COND	/;"	d
CCLSIt	DNF.h	/^typedef vector<Clause>::const_iterator	CCLSIt;$/;"	t
CLSIt	DNF.h	/^typedef vector<Clause>::iterator	CLSIt;$/;"	t
CONTAIN	Set.h	/^#define CONTAIN	/;"	d
CSIt	Set.h	/^typedef SET::const_iterator CSIt;$/;"	t
CTIt	DB.h	/^typedef CachedTable::const_iterator CTIt;$/;"	t
CachedFind	DB.h	/^typedef pair<CachedTable::const_iterator, CachedTable::const_iterator> CachedFind;$/;"	t
CachedPair	DB.h	/^typedef CachedTable::value_type CachedPair;$/;"	t
CachedTable	DB.h	/^typedef hash_multimap<int, int>	CachedTable;$/;"	t
Clause	Clause.h	/^    Clause()$/;"	f	class:Clause
Clause	Clause.h	/^    Clause(const Clause& cl)$/;"	f	class:Clause
Clause	Clause.h	/^    Clause(int item, const Tset* data, const Tset* complement)$/;"	f	class:Clause
Clause	Clause.h	/^class Clause$/;"	c
Clauses	DNF.h	/^typedef vector<Clause>  	    	Clauses;$/;"	t
Copy	helper_funs.h	/^inline void Copy(const T& s1, T& s2)$/;"	f
CopyEnd	helper_funs.h	/^inline void CopyEnd(const T& s1, T& s2)$/;"	f
DB	DB.h	/^    DB()$/;"	f	class:DB
DB	DB.h	/^class DB$/;"	c
DIt	Lattice_Node.h	/^typedef vector<double>::iterator DIt;$/;"	t
DNF	DNF.h	/^    DNF(){}$/;"	f	class:DNF
DNF	DNF.h	/^    DNF(const DNF& d)$/;"	f	class:DNF
DNF	DNF.h	/^    DNF(int item, const Tset* data, const Tset* complement)$/;"	f	class:DNF
DNF	DNF.h	/^class DNF$/;"	c
DNFS	Random_Walk.h	/^typedef vector<DNF> DNFS;$/;"	t
DNFSIt	Random_Walk.h	/^typedef vector<DNF>::iterator	DNFSIt;$/;"	t
DoubleArr	Lattice_Node.h	/^typedef vector<double> DoubleArr;$/;"	t
FAMIt	Lattice_Node.h	/^typedef vector<Lattice_Node>::iterator	FAMIt;$/;"	t
Family	Lattice_Node.h	/^typedef vector<Lattice_Node> Family;$/;"	t
HASHNS	helper_funs.h	/^#define HASHNS /;"	d
IIt	Lattice_Node.h	/^typedef vector<int>::iterator IIt;$/;"	t
Input	DB.h	/^class Input$/;"	c
IntArr	Lattice_Node.h	/^typedef vector<int> IntArr;$/;"	t
Intersect	helper_funs.h	/^inline void Intersect(const T& s1, const T &s2, T& r)$/;"	f
Iset	Set.h	/^#define Iset	/;"	d
Lattice_Node	Lattice_Node.h	/^    Lattice_Node()$/;"	f	class:Lattice_Node
Lattice_Node	Lattice_Node.h	/^    Lattice_Node(const DNF& DNF_node)$/;"	f	class:Lattice_Node
Lattice_Node	Lattice_Node.h	/^    Lattice_Node(const Lattice_Node& ln)$/;"	f	class:Lattice_Node
Lattice_Node	Lattice_Node.h	/^    Lattice_Node(int item, const Tset* data,const Tset* complement)$/;"	f	class:Lattice_Node
Lattice_Node	Lattice_Node.h	/^class Lattice_Node$/;"	c
MAX_LINE	DB.h	/^#define MAX_LINE /;"	d
MAX_WORD	DB.h	/^#define MAX_WORD /;"	d
MGDCIt	Random_Walk.h	/^typedef Min_Gen_DNF_Htable::const_iterator MGDCIt;$/;"	t
MGDFind	Random_Walk.h	/^typedef pair<Min_Gen_DNF_Htable::const_iterator, Min_Gen_DNF_Htable::const_iterator> MGDFind;$/;"	t
MGDIt	Random_Walk.h	/^typedef Min_Gen_DNF_Htable::iterator MGDIt;$/;"	t
MGDPair	Random_Walk.h	/^typedef Min_Gen_DNF_Htable::value_type MGDPair;$/;"	t
Min_Gen_DNF_Htable	Random_Walk.h	/^typedef hash_multimap<int, DNF>	Min_Gen_DNF_Htable;$/;"	t
Nodes	Random_Walk.h	/^typedef vector<Lattice_Node> Nodes;$/;"	t
Random_Walk	Random_Walk.h	/^class Random_Walk$/;"	c
SET	Set.h	/^typedef vector<int>	SET;$/;"	t
SIt	Set.h	/^typedef SET::iterator	SIt;$/;"	t
Set	Set.h	/^    Set(){}$/;"	f	class:Set
Set	Set.h	/^    Set(const Set& s)$/;"	f	class:Set
Set	Set.h	/^    Set(int item)$/;"	f	class:Set
Set	Set.h	/^class Set$/;"	c
Tset	Set.h	/^#define Tset	/;"	d
Union	helper_funs.h	/^inline void Union(const T& s1, const T &s2, T& r)$/;"	f
_DNF_H	DNF.h	/^#define _DNF_H$/;"	d
_HELPER_FUNS_H_	helper_funs.h	/^#define _HELPER_FUNS_H_$/;"	d
_ITPAIR_H	Clause.h	/^#define _ITPAIR_H$/;"	d
_LATTICE_NODE_H	Lattice_Node.h	/^#define _LATTICE_NODE_H$/;"	d
_RANDOM_H_	random.h	/^#define _RANDOM_H_$/;"	d
_RANDOM_WALK_H	Random_Walk.h	/^#define _RANDOM_WALK_H$/;"	d
_S	Set.h	/^    SET _S;$/;"	m	class:Set
_SET_H	Set.h	/^#define _SET_H$/;"	d
_cls	DNF.h	/^    Clauses	_cls;$/;"	m	class:DNF
_cls_ts	DNF.h	/^    Tset    _cls_ts;              \/\/ the union of all tidset of the clauses$/;"	m	class:DNF
_current_node	Random_Walk.h	/^    Lattice_Node _current_node;$/;"	m	class:Random_Walk
_edge_weights	Lattice_Node.h	/^    DoubleArr _edge_weights;$/;"	m	class:Lattice_Node
_iS	Clause.h	/^    Iset    _iS;$/;"	m	class:Clause
_is_ctset_update	DNF.h	/^    bool    _is_ctset_update;$/;"	m	class:DNF
_is_min_gen	DNF.h	/^    bool    _is_min_gen;$/;"	m	class:DNF
_is_prop_a	DNF.h	/^    bool    _is_prop_a;           \/\/ true if satisfied$/;"	m	class:DNF
_is_prop_b	DNF.h	/^    bool    _is_prop_b;           \/\/ true if satisfied$/;"	m	class:DNF
_is_tset_update	Clause.h	/^    bool    _is_tset_update;    \/\/ is tset update or not$/;"	m	class:Clause
_ln_DNF	Lattice_Node.h	/^    DNF _ln_DNF;$/;"	m	class:Lattice_Node
_ln_children	Lattice_Node.h	/^    Family _ln_children;$/;"	m	class:Lattice_Node
_ln_degree	Lattice_Node.h	/^    int _ln_degree;$/;"	m	class:Lattice_Node
_ln_nchild	Lattice_Node.h	/^    int _ln_nchild;         \/\/ number of children$/;"	m	class:Lattice_Node
_ln_nparen	Lattice_Node.h	/^    int _ln_nparen;         \/\/ number of parents$/;"	m	class:Lattice_Node
_ln_parents	Lattice_Node.h	/^    Family _ln_parents;$/;"	m	class:Lattice_Node
_min_dnf_idx	Random_Walk.h	/^    int _min_dnf_idx;$/;"	m	class:Random_Walk
_min_gen_DNF_candidates	Random_Walk.h	/^    Min_Gen_DNF_Htable _min_gen_DNF_candidates;$/;"	m	class:Random_Walk
_min_gen_DNFs	Random_Walk.h	/^    DNFS _min_gen_DNFs;$/;"	m	class:Random_Walk
_nchild	Random_Walk.h	/^    int _nchild;$/;"	m	class:Random_Walk
_non_mdnf_cnt	Random_Walk.h	/^    int _non_mdnf_cnt ;$/;"	m	class:Random_Walk
_nparen	Random_Walk.h	/^    int _nparen;$/;"	m	class:Random_Walk
_num_neigh_min	Lattice_Node.h	/^    int     _num_neigh_min;$/;"	m	class:Lattice_Node
_num_neigh_nonmin	Lattice_Node.h	/^    int     _num_neigh_nonmin;$/;"	m	class:Lattice_Node
_nwalks	Random_Walk.h	/^    int _nwalks;$/;"	m	class:Random_Walk
_tS	Clause.h	/^    Tset    _tS;$/;"	m	class:Clause
_trans_accuprob	Lattice_Node.h	/^    DoubleArr _trans_accuprob;  \/\/ store accumulated transition probabilites$/;"	m	class:Lattice_Node
_trans_prob	Lattice_Node.h	/^    DoubleArr _trans_prob;      \/\/ store transition probabilites$/;"	m	class:Lattice_Node
_var_dist	Random_Walk.h	/^    DoubleArr _var_dist;$/;"	m	class:Random_Walk
add_item_as_clause	DNF.h	/^    bool add_item_as_clause(int item, const Tset* data, const Tset* complement)$/;"	f	class:DNF
add_item_to_clause	DNF.h	/^    bool add_item_to_clause(int item, int clause_pos, const Tset* data, const Tset* complement)$/;"	f	class:DNF
aver_tlen	DB.h	/^    double aver_tlen;$/;"	m	class:DB
bHasZero	DB.h	/^    bool bHasZero;$/;"	m	class:DB
boost_get_a_random_number	random.cpp	/^unsigned int boost_get_a_random_number(int lowest, int highest) {$/;"	f
buf	DB.h	/^    char      buf[MAX_LINE], sub[MAX_WORD];$/;"	m	class:Input
calc_var_dist	Random_Walk.h	/^    double calc_var_dist(int nStates)$/;"	f	class:Random_Walk
clear	Clause.h	/^    void clear()$/;"	f	class:Clause
clear	DNF.h	/^    void clear()$/;"	f	class:DNF
clear	Lattice_Node.h	/^    void clear()$/;"	f	class:Lattice_Node
clear	Set.h	/^    void clear()$/;"	f	class:Set
clear_fam	Lattice_Node.h	/^    void clear_fam()$/;"	f	class:Lattice_Node
close	DB.h	/^    void close()$/;"	f	class:Input
cmax_sup	min-gen-DNF.cpp	/^int cmax_sup = 10000000;$/;"	v
cmin_sup	min-gen-DNF.cpp	/^int cmin_sup = 1;$/;"	v
complement	DB.h	/^    Tset	*complement;$/;"	m	class:DB
contain	Set.h	/^    bool contain( Set &s )$/;"	f	class:Set
converted	DB.h	/^    bool converted( char *filename, bool fNegative )$/;"	f	class:DB
convertedName	DB.h	/^    char	convertedName[50];$/;"	m	class:DB
data	DB.h	/^    Tset	*data;$/;"	m	class:DB
delete_an_item	Clause.h	/^	bool delete_an_item(int item_pos, const Tset* data, const Tset* complement)$/;"	f	class:Clause
delete_item_as_clause	DNF.h	/^    bool delete_item_as_clause(int clause_pos)$/;"	f	class:DNF
delete_item_in_clause	DNF.h	/^    bool delete_item_in_clause(int clause_pos, int item_pos, const Tset* data, const Tset* complement)$/;"	f	class:DNF
determine_neighborDNF_minimality	Lattice_Node.h	/^    void determine_neighborDNF_minimality(const Tset* data,const Tset* complement)$/;"	f	class:Lattice_Node
determine_neighbor_degree_AND	Lattice_Node.h	/^    void determine_neighbor_degree_AND(const int itemNum, const Tset* data, const Tset* complement,$/;"	f	class:Lattice_Node
determine_neighbor_degree_DNF_2	Lattice_Node.h	/^    void determine_neighbor_degree_DNF_2(const int itemNum, const Tset* data, const Tset* complement,$/;"	f	class:Lattice_Node
determine_neighbor_degree_DNF_3	Lattice_Node.h	/^    void determine_neighbor_degree_DNF_3(const int itemNum, const Tset* data, const Tset* complement,$/;"	f	class:Lattice_Node
dmax_sup	min-gen-DNF.cpp	/^int dmax_sup = 10000000;$/;"	v
dmin_sup	min-gen-DNF.cpp	/^int dmin_sup = 1;$/;"	v
eqint	helper_funs.h	/^struct eqint$/;"	s
eqstr	helper_funs.h	/^struct eqstr$/;"	s
fConverted	DB.h	/^    bool	fConverted;$/;"	m	class:DB
frandom	helper_funs.h	/^double frandom( double value )$/;"	f
freq_two_items_and	DB.h	/^    CachedTable freq_two_items_and;$/;"	m	class:DB
freq_two_items_or	DB.h	/^    CachedTable freq_two_items_or;$/;"	m	class:DB
generate_candidate_items_to_add	Lattice_Node.h	/^    void generate_candidate_items_to_add(const int item, const CachedTable& freq_two_items, Iset* freq_item_cand, int& idx)$/;"	f	class:Lattice_Node
getCached_and	DB.h	/^    void getCached_and(bool fNegative, bool fOutput)$/;"	f	class:DB
getCached_or	DB.h	/^    void getCached_or(bool fNegative, bool fOutput)$/;"	f	class:DB
getClausesTset	DNF.h	/^    bool getClausesTset()$/;"	f	class:DNF
getLength	DNF.h	/^    int getLength()$/;"	f	class:DNF
getLine	DB.h	/^    bool getLine()$/;"	f	class:Input
getSum	Clause.h	/^    int getSum()$/;"	f	class:Clause
getSum	DNF.h	/^    int getSum()$/;"	f	class:DNF
getSupport	DNF.h	/^    int getSupport()$/;"	f	class:DNF
getTset	Set.h	/^    void getTset(const Tset* data, const Tset* complement, Tset &T )$/;"	f	class:Set
getWholeSet_real	DB.h	/^    int getWholeSet_real()$/;"	f	class:DB
getWord	DB.h	/^    char* getWord( char sep )  \/\/ '\\t'$/;"	f	class:Input
get_a_random_number	random.cpp	/^unsigned int get_a_random_number(int lowest, int highest) {$/;"	f
get_edge_weight_2	Lattice_Node.h	/^    void get_edge_weight_2(\/*double aver_tlen, double max_tlen,*\/ double a_val, double c_val)$/;"	f	class:Lattice_Node
get_edge_weight_3	Lattice_Node.h	/^    void get_edge_weight_3(double c_val)$/;"	f	class:Lattice_Node
get_item_tset	Set.h	/^Tset* get_item_tset(const int item, const Tset* data, const Tset* complement)$/;"	f
get_item_tset	Set.h	/^void get_item_tset(const int item, const Tset* data,const Tset* complement, Tset& T)$/;"	f
get_ln_children_candidates	Lattice_Node.h	/^    void get_ln_children_candidates(const int itemNum, const Tset* data, const Tset* complement,$/;"	f	class:Lattice_Node
get_ln_degree_by_func	Lattice_Node.h	/^    void get_ln_degree_by_func()$/;"	f	class:Lattice_Node
get_ln_degree_by_val	Lattice_Node.h	/^    void get_ln_degree_by_val()$/;"	f	class:Lattice_Node
get_ln_parent_candidates	Lattice_Node.h	/^    void get_ln_parent_candidates(const int itemNum, const Tset* data, const Tset* complement,$/;"	f	class:Lattice_Node
get_min_gen_DNF_candidates_size	Random_Walk.h	/^    unsigned int get_min_gen_DNF_candidates_size()$/;"	f	class:Random_Walk
get_min_gen_DNFs_size	Random_Walk.h	/^    unsigned int get_min_gen_DNFs_size()$/;"	f	class:Random_Walk
get_num_children	Lattice_Node.h	/^    int get_num_children()$/;"	f	class:Lattice_Node
get_num_children	Random_Walk.h	/^    int get_num_children()$/;"	f	class:Random_Walk
get_num_clauses	Lattice_Node.h	/^    int get_num_clauses()$/;"	f	class:Lattice_Node
get_num_parent	Lattice_Node.h	/^    int get_num_parent()$/;"	f	class:Lattice_Node
get_num_parents	Random_Walk.h	/^    int get_num_parents()$/;"	f	class:Random_Walk
get_trans_accuprob_rj	Lattice_Node.h	/^    void get_trans_accuprob_rj()$/;"	f	class:Lattice_Node
get_trans_accuprob_wr	Lattice_Node.h	/^    void get_trans_accuprob_wr(double restart_prob) \/\/ with the probability it jumps to the origin$/;"	f	class:Lattice_Node
get_trans_prob_AND	Lattice_Node.h	/^    void get_trans_prob_AND()$/;"	f	class:Lattice_Node
hashVal	Set.h	/^    int hashVal()$/;"	f	class:Set
infile	DB.h	/^    ifstream  infile;$/;"	m	class:Input
insert	DNF.h	/^    void insert( Clause &it )$/;"	f	class:DNF
insert	Set.h	/^    void insert( int x )$/;"	f	class:Set
insert_an_item	Clause.h	/^    bool insert_an_item(int item, const Tset* data, const Tset* complement)$/;"	f	class:Clause
irandom	helper_funs.h	/^int irandom( int value )$/;"	f
is_MG	Clause.h	/^    bool is_MG(const Tset* data, const Tset* complement)$/;"	f	class:Clause
is_all_MGs	DNF.h	/^    bool is_all_MGs(const Tset* data, const Tset* complement)$/;"	f	class:DNF
is_ln_DNF	Lattice_Node.h	/^    void is_ln_DNF(const Tset* data,const Tset* complement)$/;"	f	class:Lattice_Node
is_min_gen_DNF	DNF.h	/^    bool is_min_gen_DNF(const Tset* data,const Tset* complement)$/;"	f	class:DNF
is_qualified	DNF.h	/^    bool is_qualified(const Tset* data,const Tset* complement)$/;"	f	class:DNF
is_simplest_DNF	DNF.h	/^    bool is_simplest_DNF(const Tset* data,const Tset* complement)$/;"	f	class:DNF
is_subset_clause	DNF.h	/^    bool is_subset_clause()$/;"	f	class:DNF
is_subset_clause_backup	DNF.h	/^    bool is_subset_clause_backup()     \/\/ not sorted$/;"	f	class:DNF
is_subset_tset	DNF.h	/^    bool is_subset_tset()$/;"	f	class:DNF
itemNum	DB.h	/^    int	itemNum, tranNum;$/;"	m	class:DB
k	DB.h	/^    int       len, k;$/;"	m	class:Input
len	DB.h	/^    int       len, k;$/;"	m	class:Input
main	min-gen-DNF.cpp	/^int main(int argc, char *argv[])$/;"	f
max_tlen	DB.h	/^    double max_tlen;$/;"	m	class:DB
minoverlap	min-gen-DNF.cpp	/^int minoverlap = 0;$/;"	v
open	DB.h	/^    void open(char *file)$/;"	f	class:Input
operator !=	Clause.h	/^    bool operator!=(const Clause &c) const$/;"	f	class:Clause
operator !=	DNF.h	/^	bool operator!=(const DNF &d ) const$/;"	f	class:DNF
operator !=	Set.h	/^    bool operator!=( Set &s )$/;"	f	class:Set
operator ()	helper_funs.h	/^    bool operator()(const char* s1, const char* s2) const$/;"	f	struct:eqstr
operator ()	helper_funs.h	/^    bool operator()(int i1, int i2) const$/;"	f	struct:eqint
operator +=	Set.h	/^    void operator+=( Set &s )$/;"	f	class:Set
operator <	Clause.h	/^    bool operator<(const Clause &c) const$/;"	f	class:Clause
operator <	DNF.h	/^	bool operator<(const DNF &d ) const$/;"	f	class:DNF
operator <	Set.h	/^    bool operator< ( Set &s )$/;"	f	class:Set
operator ==	Clause.h	/^    bool operator==(const Clause &c) const$/;"	f	class:Clause
operator ==	DNF.h	/^    bool operator==(const DNF &d ) const$/;"	f	class:DNF
operator ==	Set.h	/^    bool operator==( Set &s )$/;"	f	class:Set
operator []	DB.h	/^    Set &operator[]( int i )$/;"	f	class:DB
parseInput	min-gen-DNF.cpp	/^void parseInput( int argc, char* argv[],$/;"	f
prop_a_clause_id	DNF.h	/^    int     prop_a_clause_id;$/;"	m	class:DNF
prop_b_clause_id	DNF.h	/^    int     prop_b_clause_id;$/;"	m	class:DNF
randomWithDiscreteProbability	random.cpp	/^unsigned int randomWithDiscreteProbability(const vector<double>& accum_prob_vec) {$/;"	f
randomWithDiscreteProbability	random.cpp	/^unsigned int randomWithDiscreteProbability(const vector<int>& accum_prob_vec) {$/;"	f
random_jump	Random_Walk.h	/^    void random_jump(const int itemNum, const Tset* data, const Tset* complement, bool fNegative, bool fOutput)$/;"	f	class:Random_Walk
random_uni01	random.cpp	/^double random_uni01() {$/;"	f
readfile	DB.h	/^    void readfile( char *filename, bool fNegative )$/;"	f	class:DB
readsize	DB.h	/^    void readsize( char *filename, bool fNegative )$/;"	f	class:DB
rw_initialize	Random_Walk.h	/^    void rw_initialize(const int itemNum, const Tset* data, const Tset* complement, bool fNegative, bool fOutput)$/;"	f	class:Random_Walk
saveConvertedFile	DB.h	/^    void saveConvertedFile()$/;"	f	class:DB
sel_next_ln	Lattice_Node.h	/^    Lattice_Node& sel_next_ln(unsigned int idx)$/;"	f	class:Lattice_Node
show	Clause.h	/^	void show()$/;"	f	class:Clause
show	Clause.h	/^    void show() const$/;"	f	class:Clause
show	DNF.h	/^    void show()$/;"	f	class:DNF
show	Random_Walk.h	/^    void show()$/;"	f	class:Random_Walk
show	Set.h	/^	void show()$/;"	f	class:Set
show	Set.h	/^    void show( char *seperation, bool letter )$/;"	f	class:Set
show	Set.h	/^    void show(char *seperation, bool letter ) const$/;"	f	class:Set
show_stat	Random_Walk.h	/^    void show_stat(char* inputf)$/;"	f	class:Random_Walk
size	DNF.h	/^    int size()$/;"	f	class:DNF
size	Set.h	/^    int size() const$/;"	f	class:Set
sort_DNF	DNF.h	/^	void sort_DNF()$/;"	f	class:DNF
sort_DNFs	Random_Walk.h	/^    void sort_DNFs()$/;"	f	class:Random_Walk
sort_DNFs_criterion	Random_Walk.h	/^bool sort_DNFs_criterion(const DNF &dnf1, const DNF &dnf2)$/;"	f
sort_clause	Clause.h	/^	void sort_clause()$/;"	f	class:Clause
sort_clauses_criterion	DNF.h	/^bool sort_clauses_criterion(const Clause &cl1, const Clause &cl2)$/;"	f
sort_clauses_criterion_backup	DNF.h	/^bool sort_clauses_criterion_backup(const Clause &cl1, const Clause &cl2)$/;"	f
sort_del_dup	Set.h	/^    void sort_del_dup()$/;"	f	class:Set
sort_set	Set.h	/^    void sort_set()$/;"	f	class:Set
sub	DB.h	/^    char      buf[MAX_LINE], sub[MAX_WORD];$/;"	m	class:Input
sub	Set.h	/^    void sub(Set &s, Set &r )$/;"	f	class:Set
sum	Set.h	/^    int sum()$/;"	f	class:Set
tranNum	DB.h	/^    int	itemNum, tranNum;$/;"	m	class:DB
updateClausesTset	DNF.h	/^	bool updateClausesTset(int item, const Tset* data, const Tset* complement)$/;"	f	class:DNF
update_tset_add	Clause.h	/^	void update_tset_add(int item, const Tset* data, const Tset* complement)$/;"	f	class:Clause
update_tset_delete	Clause.h	/^    void update_tset_delete(const Tset* data, const Tset* complement)$/;"	f	class:Clause
walk_to_next_AND	Random_Walk.h	/^    void walk_to_next_AND(const int itemNum, const Tset* data, const Tset* complement,$/;"	f	class:Random_Walk
walk_to_next_DNF	Random_Walk.h	/^    void walk_to_next_DNF(const int itemNum, \/*const double aver_tlen, const double max_tlen,*\/ const Tset* data, const Tset* complement,$/;"	f	class:Random_Walk
whole	DB.h	/^    Set	whole;$/;"	m	class:DB
~DB	DB.h	/^    ~DB()$/;"	f	class:DB
